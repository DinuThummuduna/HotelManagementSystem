/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coursework2.hotel.mvc.view;
import coursework2.hotel.mvc.model.RoomTypeModel;
import coursework2.hotel.mvc.controller.RoomTypeController;
import coursework2.hotel.mvc.dto.RoomTypeDto;
import coursework2.hotel.mvc.controller.CustomerController;
import coursework2.hotel.mvc.dto.CustomerDto;
import coursework2.hotel.mvc.dto.RoomTypeDetailDto;
import javax.swing.JOptionPane;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class RoomTypeView extends javax.swing.JFrame {
private RoomTypeController roomTypeController = new RoomTypeController();
private CustomerController customerController = new CustomerController();
    /**
     * Creates new form RoomTypeView
     */
    public RoomTypeView() {
        initComponents();
        loadCustomerRooms();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CustomerIdlbl = new javax.swing.JLabel();
        customerDetaillbl = new javax.swing.JLabel();
        roomcatlbl = new javax.swing.JLabel();
        roomcattxt = new javax.swing.JTextField();
        customerIdtxt = new javax.swing.JTextField();
        searchCustomerBtn = new javax.swing.JButton();
        searchRoomCatBtn = new javax.swing.JButton();
        roomDetaillbl = new javax.swing.JLabel();
        noOfRoomslbl = new javax.swing.JLabel();
        noOfRoomstxt = new javax.swing.JTextField();
        amountForRoomslbl = new javax.swing.JLabel();
        amountRoomtxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomDetailtbl = new javax.swing.JTable();
        deleteBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 153, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 0, 153));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Royal Hotel Villa");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 0, 204));
        jLabel2.setText("Room Details");

        CustomerIdlbl.setText("Customer Id");

        roomcatlbl.setText("Room Category Id");

        searchCustomerBtn.setText("Search Customer");
        searchCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustomerBtnActionPerformed(evt);
            }
        });

        searchRoomCatBtn.setText("Search");
        searchRoomCatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRoomCatBtnActionPerformed(evt);
            }
        });

        noOfRoomslbl.setText("No of Rooms");

        noOfRoomstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOfRoomstxtActionPerformed(evt);
            }
        });

        amountForRoomslbl.setText("Amount For Rooms");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        roomDetailtbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(roomDetailtbl);

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(noOfRoomslbl)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(roomcatlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(roomcattxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchRoomCatBtn))
                                    .addComponent(roomDetaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(CustomerIdlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(customerIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(searchCustomerBtn)
                                        .addGap(19, 19, 19))))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerDetaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(noOfRoomstxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(amountForRoomslbl)
                                    .addGap(18, 18, 18)
                                    .addComponent(amountRoomtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(saveBtn)
                        .addGap(53, 53, 53)
                        .addComponent(deleteBtn)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CustomerIdlbl)
                            .addComponent(customerIdtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchCustomerBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customerDetaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchRoomCatBtn)
                            .addComponent(roomcattxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomcatlbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomDetaillbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(noOfRoomslbl)
                            .addComponent(noOfRoomstxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(amountForRoomslbl)
                            .addComponent(amountRoomtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveBtn)
                            .addComponent(deleteBtn))
                        .addGap(0, 24, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchRoomCatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRoomCatBtnActionPerformed
        searchRoomCategory();
// TODO add your handling code here:
    }//GEN-LAST:event_searchRoomCatBtnActionPerformed

    private void noOfRoomstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOfRoomstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noOfRoomstxtActionPerformed

    private void searchCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustomerBtnActionPerformed
       searchCustomer();

        // TODO add your handling code here:
    }//GEN-LAST:event_searchCustomerBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
       saveRoom();
        // TODO add your handling code here:
    }//GEN-LAST:event_saveBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteRoom();
// TODO add your handling code here:
    }//GEN-LAST:event_deleteBtnActionPerformed

    /**
     * @param args the command line arguments
     */
   // public static void main(String args[]) {
    //    /* Set the Nimbus look and feel */
     //   //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     //    * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
      //  try {
       //     for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
       //         if ("Nimbus".equals(info.getName())) {
       //            javax.swing.UIManager.setLookAndFeel(info.getClassName());
        //            break;
       //         }
      //      }
      //  } catch (ClassNotFoundException ex) {
     //       java.util.logging.Logger.getLogger(RoomTypeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //    } catch (InstantiationException ex) {
    //        java.util.logging.Logger.getLogger(RoomTypeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    //    } catch (IllegalAccessException ex) {
  //          java.util.logging.Logger.getLogger(RoomTypeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
   //     } catch (javax.swing.UnsupportedLookAndFeelException ex) {
    //        java.util.logging.Logger.getLogger(RoomTypeView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  //      }
        //</editor-fold>

        /* Create and display the form */
  //      java.awt.EventQueue.invokeLater(new Runnable() {
   //         public void run() {
   //             new RoomTypeView().setVisible(true);
   //         }
   //     });
 //   }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CustomerIdlbl;
    private javax.swing.JLabel amountForRoomslbl;
    private javax.swing.JTextField amountRoomtxt;
    private javax.swing.JLabel customerDetaillbl;
    private javax.swing.JTextField customerIdtxt;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel noOfRoomslbl;
    private javax.swing.JTextField noOfRoomstxt;
    private javax.swing.JLabel roomDetaillbl;
    private javax.swing.JTable roomDetailtbl;
    private javax.swing.JLabel roomcatlbl;
    private javax.swing.JTextField roomcattxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchCustomerBtn;
    private javax.swing.JButton searchRoomCatBtn;
    // End of variables declaration//GEN-END:variables


     private void loadCustomerRooms() {
        try {
            String columns[] = {"Customer Id", "Name", "Room CategoryId", "Category Name", "No Of Rooms", "Amount for Rooms"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            roomDetailtbl.setModel(dtm);

            ArrayList<RoomTypeDetailDto> roomTypeDetailDtos = roomTypeController.getAllReservation(); // Change to getAllRoom()

            for (RoomTypeDetailDto roomTypeDetailDto : roomTypeDetailDtos) {
                Object[] rowData = {roomTypeDetailDto.getCustomerId(), roomTypeDetailDto.getName(),
                        roomTypeDetailDto.getRoomCategoryId(), roomTypeDetailDto.getCategoryName(),
                        roomTypeDetailDto.getNoOfRooms(), roomTypeDetailDto.getAmountForRoom()};
                dtm.addRow(rowData);
            }

        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void searchRoomCategory() {
        try {
            Integer roomCategoryId = Integer.parseInt(roomcattxt.getText());
            RoomTypeDto roomTypeDto = roomTypeController.searchRoomCategory(roomCategoryId);
            if (roomTypeDto != null) {
                roomDetaillbl.setText(roomTypeDto.getCategoryName() + " | Amount per night LKR " + roomTypeDto.getPricePerNight());
            } else {
                JOptionPane.showMessageDialog(this, "Room category Not Found");
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid Room Category ID");
        } catch (Exception ex) {
            Logger.getLogger(RoomTypeView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchCustomer() {
        try {
            String customerId = customerIdtxt.getText();
            CustomerDto customerDto = customerController.searchCustomer(customerId);
            if (customerDto != null) {
                customerDetaillbl.setText(customerDto.getFirstName() + " " + customerDto.getLastName());
            } else {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            }

        } catch (Exception ex) {
            Logger.getLogger(RoomTypeView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void saveRoom() {
        RoomTypeDetailDto dto = new RoomTypeDetailDto();
        dto.setCustomerId(customerIdtxt.getText());
        dto.setName(customerDetaillbl.getText());

        try {
            Integer roomCategoryId = Integer.parseInt(roomcattxt.getText());
            dto.setRoomCategoryId(roomCategoryId);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid Room Category ID");
            return;
        }

        dto.setCategoryName(roomDetaillbl.getText());
        dto.setNoOfRooms(Integer.parseInt(noOfRoomstxt.getText())); // Parse to Integer
        dto.setAmountForRoom(Double.parseDouble(amountRoomtxt.getText())); // Parse to Double

        try {
            String result = roomTypeController.saveReservation(dto); // Change to saveRoom()
            System.out.println(result);
            JOptionPane.showMessageDialog(this, result);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }

    private void deleteRoom() {
        try {
            Integer roomCategoryId = Integer.parseInt(roomcattxt.getText());
            roomTypeController.deleteReservation(roomCategoryId); // Change to deleteRoom()
            JOptionPane.showMessageDialog(this, "Room deleted successfully.");

            //clear();
        } catch (Exception ex) {
            Logger.getLogger(RoomTypeView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
}